[{"D:\\Jobs\\estudando\\agenda-telefonica-rc-web\\src\\App.tsx":"1","D:\\Jobs\\estudando\\agenda-telefonica-rc-web\\src\\index.tsx":"2","D:\\Jobs\\estudando\\agenda-telefonica-rc-web\\src\\styles\\app.styles.ts":"3","D:\\Jobs\\estudando\\agenda-telefonica-rc-web\\src\\styles\\global.ts":"4","D:\\Jobs\\estudando\\agenda-telefonica-rc-web\\src\\base\\sidebar\\sidebar.tsx":"5","D:\\Jobs\\estudando\\agenda-telefonica-rc-web\\src\\base\\sidebar\\sidebar.styles.ts":"6","D:\\Jobs\\estudando\\agenda-telefonica-rc-web\\src\\pages\\contatos\\contatos.tsx":"7","D:\\Jobs\\estudando\\agenda-telefonica-rc-web\\src\\base\\title\\title.styles.ts":"8","D:\\Jobs\\estudando\\agenda-telefonica-rc-web\\src\\reportWebVitals.ts":"9","D:\\Jobs\\estudando\\agenda-telefonica-rc-web\\src\\base\\title\\title.tsx":"10","D:\\Jobs\\estudando\\agenda-telefonica-rc-web\\src\\base\\table\\table.styles.ts":"11","D:\\Jobs\\estudando\\agenda-telefonica-rc-web\\src\\utils\\firebase.utils.ts":"12","D:\\Jobs\\estudando\\agenda-telefonica-rc-web\\src\\routes.tsx":"13","D:\\Jobs\\estudando\\agenda-telefonica-rc-web\\src\\pages\\gerar-listas\\gerar-listas.tsx":"14","D:\\Jobs\\estudando\\agenda-telefonica-rc-web\\src\\pages\\contatos\\create.tsx":"15","D:\\Jobs\\estudando\\agenda-telefonica-rc-web\\src\\base\\form\\form.styles.ts":"16","D:\\Jobs\\estudando\\agenda-telefonica-rc-web\\src\\base\\masks\\phone.ts":"17","D:\\Jobs\\estudando\\agenda-telefonica-rc-web\\src\\base\\validators\\phone.ts":"18","D:\\Jobs\\estudando\\agenda-telefonica-rc-web\\src\\pages\\gerar-listas\\gerar-listas.styles.ts":"19","D:\\Jobs\\estudando\\agenda-telefonica-rc-web\\src\\pages\\contatos\\contatos.styles.ts":"20","D:\\Jobs\\estudando\\agenda-telefonica-rc-web\\src\\base\\confirm\\confirm.styles.ts":"21","D:\\Jobs\\estudando\\agenda-telefonica-rc-web\\src\\base\\confirm\\confirm.tsx":"22","D:\\Jobs\\estudando\\agenda-telefonica-rc-web\\src\\hooks\\confirm.tsx":"23"},{"size":733,"mtime":1628527749454,"results":"24","hashOfConfig":"25"},{"size":478,"mtime":1610821086000,"results":"26","hashOfConfig":"25"},{"size":573,"mtime":1612827638000,"results":"27","hashOfConfig":"25"},{"size":1760,"mtime":1610832418000,"results":"28","hashOfConfig":"25"},{"size":1501,"mtime":1613420734000,"results":"29","hashOfConfig":"25"},{"size":560,"mtime":1613408070000,"results":"30","hashOfConfig":"25"},{"size":8829,"mtime":1629420791433,"results":"31","hashOfConfig":"25"},{"size":176,"mtime":1610999508000,"results":"32","hashOfConfig":"25"},{"size":425,"mtime":1610819732000,"results":"33","hashOfConfig":"25"},{"size":270,"mtime":1613410482000,"results":"34","hashOfConfig":"25"},{"size":222,"mtime":1613407604000,"results":"35","hashOfConfig":"25"},{"size":2198,"mtime":1629420811579,"results":"36","hashOfConfig":"25"},{"size":683,"mtime":1613420956000,"results":"37","hashOfConfig":"25"},{"size":4437,"mtime":1626227387232,"results":"38","hashOfConfig":"25"},{"size":8048,"mtime":1626118829364,"results":"39","hashOfConfig":"25"},{"size":459,"mtime":1626135166330,"results":"40","hashOfConfig":"25"},{"size":329,"mtime":1614043352000,"results":"41","hashOfConfig":"25"},{"size":229,"mtime":1614044840000,"results":"42","hashOfConfig":"25"},{"size":246,"mtime":1615942048000,"results":"43","hashOfConfig":"25"},{"size":704,"mtime":1626135058191,"results":"44","hashOfConfig":"25"},{"size":1887,"mtime":1628540996783,"results":"45","hashOfConfig":"25"},{"size":2287,"mtime":1628631979528,"results":"46","hashOfConfig":"25"},{"size":1563,"mtime":1628630431773,"results":"47","hashOfConfig":"25"},{"filePath":"48","messages":"49","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},"1todedw",{"filePath":"51","messages":"52","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"53"},{"filePath":"54","messages":"55","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"53"},{"filePath":"56","messages":"57","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"58"},{"filePath":"59","messages":"60","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"61"},{"filePath":"62","messages":"63","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"64","messages":"65","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"66","messages":"67","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"68","messages":"69","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"71","messages":"72","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"73","messages":"74","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"75"},{"filePath":"76","messages":"77","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"78","messages":"79","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"80","messages":"81","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"82","messages":"83","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"84","usedDeprecatedRules":"85"},{"filePath":"86","messages":"87","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"85"},{"filePath":"88","messages":"89","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"90"},{"filePath":"91","messages":"92","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"93","messages":"94","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"95","messages":"96","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"97","messages":"98","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"99","messages":"100","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"101","messages":"102","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"D:\\Jobs\\estudando\\agenda-telefonica-rc-web\\src\\App.tsx",[],["103","104"],"D:\\Jobs\\estudando\\agenda-telefonica-rc-web\\src\\index.tsx",[],["105","106"],"D:\\Jobs\\estudando\\agenda-telefonica-rc-web\\src\\styles\\app.styles.ts",[],"D:\\Jobs\\estudando\\agenda-telefonica-rc-web\\src\\styles\\global.ts",[],["107","108"],"D:\\Jobs\\estudando\\agenda-telefonica-rc-web\\src\\base\\sidebar\\sidebar.tsx",[],["109","110"],"D:\\Jobs\\estudando\\agenda-telefonica-rc-web\\src\\base\\sidebar\\sidebar.styles.ts",[],"D:\\Jobs\\estudando\\agenda-telefonica-rc-web\\src\\pages\\contatos\\contatos.tsx",["111","112","113","114","115","116"],"D:\\Jobs\\estudando\\agenda-telefonica-rc-web\\src\\base\\title\\title.styles.ts",[],"D:\\Jobs\\estudando\\agenda-telefonica-rc-web\\src\\reportWebVitals.ts",[],["117","118"],"D:\\Jobs\\estudando\\agenda-telefonica-rc-web\\src\\base\\title\\title.tsx",[],"D:\\Jobs\\estudando\\agenda-telefonica-rc-web\\src\\base\\table\\table.styles.ts",[],["119","120"],"D:\\Jobs\\estudando\\agenda-telefonica-rc-web\\src\\utils\\firebase.utils.ts",["121"],"D:\\Jobs\\estudando\\agenda-telefonica-rc-web\\src\\routes.tsx",[],"D:\\Jobs\\estudando\\agenda-telefonica-rc-web\\src\\pages\\gerar-listas\\gerar-listas.tsx",[],"D:\\Jobs\\estudando\\agenda-telefonica-rc-web\\src\\pages\\contatos\\create.tsx",["122","123"],"import React, { useEffect, useState } from 'react';\r\nimport Form from '../../base/form/form.styles';\r\nimport { phoneMask } from '../../base/masks/phone';\r\nimport TitleComponent from '../../base/title/title';\r\nimport { phoneValidator } from '../../base/validators/phone';\r\nimport FirebaseService from '../../utils/firebase.utils';\r\nimport { ToastContainer, toast } from 'react-toastify';\r\nimport ClipLoader from \"react-spinners/ClipLoader\";\r\nimport { useHistory, useParams } from 'react-router-dom';\r\nimport { DocumentData } from '@firebase/firestore-types';\r\nimport { Contact } from '../../base/contact/contact.model';\r\nimport { FaSpinner } from 'react-icons/fa';\r\nimport { Spinner } from './contatos.styles';\r\n\r\nconst CreateContact: React.FC = () => {\r\n    const history = useHistory();\r\n    const [name, setName] = useState<string>('');\r\n    const [phone, setPhone] = useState<string>('');\r\n    const [validationMessage, setValidationMessage] = useState<string>('');\r\n    const [backupPhone, setBackupPhone] = useState<string>('');\r\n    const [isPhoneValid, setIsPhoneValid] = useState<boolean>(false);\r\n    const [isPhoneTouched, setIsPhoneTouched] = useState<boolean>(false);\r\n    const [isLoading, setIsLoading] = useState<boolean>(false);\r\n    const [isSaving, setIsSaving] = useState<boolean>(false);\r\n    let { id }: { id: string } = useParams();\r\n    let title = id ? 'Editar Contato' : 'Criar contato';\r\n\r\n    useEffect(() => {\r\n        getPhoneMask(phone);\r\n    }, [phone]);\r\n\r\n    useEffect(() => {\r\n        if (id) {\r\n            getContatctById();\r\n        }\r\n    }, [id]);\r\n\r\n    const getPhoneMask = (value: string) => {\r\n        if (!value) {\r\n            return;\r\n        }\r\n        \r\n        const masked = phoneMask(value);\r\n        setPhone(masked);\r\n\r\n        if (backupPhone !== phone) {\r\n            validatePhone();\r\n        }\r\n    }\r\n\r\n    const validatePhone = () => {\r\n        const isValid = phoneValidator(phone);\r\n        const message = isValid ? '' : 'Telefone inválido.';\r\n        setIsPhoneValid(isValid);\r\n        setValidationMessage(message);\r\n\r\n        if (isValid) {\r\n            setIsLoading(true);\r\n            checkIfPhoneExists();\r\n        } else {\r\n            setIsLoading(false);\r\n        }\r\n    }\r\n\r\n    const checkIfPhoneExists = () => {\r\n        if(phone.length) {\r\n            FirebaseService.findByField('contatos', 'phone', '==', phone)\r\n                .then(\r\n                    data => {\r\n                        if (!data.empty) {\r\n                            setIsPhoneValid(false);\r\n                            setValidationMessage('Este telefone já foi cadastrado.');\r\n                        }\r\n                    }\r\n                )\r\n                .finally(\r\n                    () => setIsLoading(false)\r\n                );\r\n        }\r\n    }\r\n\r\n    const submitForm = () => {\r\n        setIsSaving(true);\r\n\r\n        const contact: Contact = {\r\n            _id: id || '',\r\n            name: name || '-',\r\n            phone,\r\n        };\r\n\r\n        if (id) {\r\n            updateContact(contact);\r\n        } else {\r\n            createContact(contact);\r\n        }\r\n    }\r\n\r\n    const createContact = (contact: Contact) => {\r\n        const ref = FirebaseService.createDocReference('contatos');\r\n        contact._id = ref.id;\r\n\r\n        ref.set(contact).then(\r\n            _response => {\r\n                toast.success('Contato criado!');\r\n                clearStates();\r\n            },\r\n            _error => toast.error('Erro ao criar contato', _error),\r\n        )\r\n        .finally(\r\n            () => setIsSaving(false)\r\n        );\r\n    }\r\n\r\n    const updateContact = (contact: Contact) => {\r\n        FirebaseService.saveData('contatos', id, contact)\r\n            .then(\r\n                _response => {\r\n                    toast.success('Contato atualizado!');\r\n                    clearStates();\r\n\r\n                    setTimeout(() => {\r\n                        history.goBack();\r\n                    }, 1000);\r\n                },\r\n                _error => toast.error('Erro ao atualizar contato', _error),\r\n            )\r\n            .finally(\r\n                () => setIsSaving(false)\r\n            );\r\n    }\r\n\r\n    const clearStates = () => {\r\n        setName('');\r\n        setPhone('');\r\n        setValidationMessage('');\r\n        setIsPhoneValid(false);\r\n        setIsPhoneTouched(false);\r\n    }\r\n\r\n    const getContatctById = () => {\r\n        FirebaseService.findByField('contatos', '_id', '==', id)\r\n            .then(\r\n                (data: DocumentData) => {\r\n                    const doc = data.docs[0].data();\r\n                    setBackupPhone(doc.phone);\r\n                    setPhone(doc.phone);\r\n                    setName(doc.name);\r\n                    setValidationMessage('');\r\n                    setIsPhoneValid(true);\r\n                }\r\n            )\r\n            .finally(\r\n                () => setIsLoading(false)\r\n            );\r\n    };\r\n\r\n    return (\r\n        <>\r\n            <TitleComponent title={title} />\r\n\r\n            <Form className=\"p-3 alert alert-dark mt-4\">\r\n                <form>\r\n                    <div className=\"row\">\r\n                        <div className=\"col-sm-6 relative\">\r\n                            <label className=\"form-label d-block mb-2\">Telefone *</label>\r\n                            <input\r\n                                type=\"tel\"\r\n                                name=\"telefone\"\r\n                                className={ isPhoneTouched && !isPhoneValid ? 'form-control border-danger' : 'form-control' }\r\n                                placeholder=\"(99) 9 9999-9999\"\r\n                                maxLength={16}\r\n                                value={phone}\r\n                                onChange={(e: any) => setPhone(e.target.value)}\r\n                                onFocus={() => setIsPhoneTouched(true)}\r\n                            />\r\n\r\n                            <small className=\"validate-message text-danger mt-1 d-block\">{ validationMessage }</small>\r\n                            <span\r\n                                className=\"icon\"\r\n                                hidden={ !isLoading }\r\n                            >\r\n                                <ClipLoader color=\"#222\" loading={true} size={18} />\r\n                            </span>\r\n                        </div>\r\n\r\n                        <div className=\"col-sm-6\">\r\n                            <label className=\"form-label d-block mb-2\">Nome</label>\r\n                            <input\r\n                                type=\"text\"\r\n                                name=\"nome\"\r\n                                className=\"form-control\"\r\n                                value={name}\r\n                                onChange={e => setName(e.target.value)}\r\n                            />\r\n                        </div>\r\n                    </div>\r\n\r\n                    <div className=\"d-flex justify-content-end mt-3\">\r\n                        <button type=\"button\" className=\"btn btn-secondary\" onClick={() => history.goBack()}>Voltar</button>\r\n                        <button\r\n                            type=\"button\"\r\n                            className=\"btn btn-primary ml-3 btn-save\"\r\n                            onClick={() => submitForm()}\r\n                            disabled={!isPhoneValid || isSaving}\r\n                        >\r\n                            {\r\n                                isSaving\r\n                                ?\r\n                                <Spinner backgroundTransparent className=\"d-flex justify-content-center align-items-center\">\r\n                                    <FaSpinner size={20} className=\"loader\" color=\"#fff\" />\r\n                                </Spinner>\r\n                                :\r\n                                'Salvar'\r\n                            }\r\n                        </button>\r\n                    </div>\r\n                </form>\r\n            </Form>\r\n\r\n            <ToastContainer />\r\n        </>\r\n    );\r\n}\r\n\r\nexport default CreateContact;",["124","125"],"D:\\Jobs\\estudando\\agenda-telefonica-rc-web\\src\\base\\form\\form.styles.ts",[],"D:\\Jobs\\estudando\\agenda-telefonica-rc-web\\src\\base\\masks\\phone.ts",[],["126","127"],"D:\\Jobs\\estudando\\agenda-telefonica-rc-web\\src\\base\\validators\\phone.ts",[],"D:\\Jobs\\estudando\\agenda-telefonica-rc-web\\src\\pages\\gerar-listas\\gerar-listas.styles.ts",[],"D:\\Jobs\\estudando\\agenda-telefonica-rc-web\\src\\pages\\contatos\\contatos.styles.ts",[],"D:\\Jobs\\estudando\\agenda-telefonica-rc-web\\src\\base\\confirm\\confirm.styles.ts",[],"D:\\Jobs\\estudando\\agenda-telefonica-rc-web\\src\\base\\confirm\\confirm.tsx",[],"D:\\Jobs\\estudando\\agenda-telefonica-rc-web\\src\\hooks\\confirm.tsx",[],{"ruleId":"128","replacedBy":"129"},{"ruleId":"130","replacedBy":"131"},{"ruleId":"128","replacedBy":"132"},{"ruleId":"130","replacedBy":"133"},{"ruleId":"128","replacedBy":"134"},{"ruleId":"130","replacedBy":"135"},{"ruleId":"128","replacedBy":"136"},{"ruleId":"130","replacedBy":"137"},{"ruleId":"138","severity":1,"message":"139","line":26,"column":8,"nodeType":"140","endLine":26,"endColumn":10,"suggestions":"141"},{"ruleId":"138","severity":1,"message":"142","line":33,"column":8,"nodeType":"140","endLine":33,"endColumn":25,"suggestions":"143"},{"ruleId":"138","severity":1,"message":"144","line":49,"column":8,"nodeType":"140","endLine":49,"endColumn":10,"suggestions":"145"},{"ruleId":"138","severity":1,"message":"146","line":67,"column":8,"nodeType":"140","endLine":67,"endColumn":10,"suggestions":"147"},{"ruleId":"138","severity":1,"message":"148","line":76,"column":26,"nodeType":"149","endLine":79,"endColumn":16},{"ruleId":"138","severity":1,"message":"150","line":103,"column":8,"nodeType":"140","endLine":103,"endColumn":10,"suggestions":"151"},{"ruleId":"128","replacedBy":"152"},{"ruleId":"130","replacedBy":"153"},{"ruleId":"128","replacedBy":"154"},{"ruleId":"130","replacedBy":"155"},{"ruleId":"156","severity":1,"message":"157","line":3,"column":10,"nodeType":"158","messageId":"159","endLine":3,"endColumn":17},{"ruleId":"138","severity":1,"message":"160","line":30,"column":8,"nodeType":"140","endLine":30,"endColumn":15,"suggestions":"161"},{"ruleId":"138","severity":1,"message":"162","line":36,"column":8,"nodeType":"140","endLine":36,"endColumn":12,"suggestions":"163"},{"ruleId":"128","replacedBy":"164"},{"ruleId":"130","replacedBy":"165"},{"ruleId":"128","replacedBy":"166"},{"ruleId":"130","replacedBy":"167"},"no-native-reassign",["168"],"no-negated-in-lhs",["169"],["168"],["169"],["168"],["169"],["168"],["169"],"react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'loadContacts'. Either include it or remove the dependency array.","ArrayExpression",["170"],"React Hook useEffect has missing dependencies: 'removeConfirm' and 'removeContact'. Either include them or remove the dependency array.",["171"],"React Hook useCallback has a missing dependency: 'getContacts'. Either include it or remove the dependency array.",["172"],"React Hook useCallback has a missing dependency: 'addConfirm'. Either include it or remove the dependency array.",["173"],"Assignments to the 'timeoutControl' variable from inside React Hook useCallback will be lost after each render. To preserve the value over time, store it in a useRef Hook and keep the mutable value in the '.current' property. Otherwise, you can move this variable directly inside useCallback.","CallExpression","React Hook useCallback has a missing dependency: 'loadContacts'. Either include it or remove the dependency array.",["174"],["168"],["169"],["168"],["169"],"@typescript-eslint/no-unused-vars","'Contact' is defined but never used.","Identifier","unusedVar","React Hook useEffect has a missing dependency: 'getPhoneMask'. Either include it or remove the dependency array.",["175"],"React Hook useEffect has a missing dependency: 'getContatctById'. Either include it or remove the dependency array.",["176"],["168"],["169"],["168"],["169"],"no-global-assign","no-unsafe-negation",{"desc":"177","fix":"178"},{"desc":"179","fix":"180"},{"desc":"181","fix":"182"},{"desc":"183","fix":"184"},{"desc":"177","fix":"185"},{"desc":"186","fix":"187"},{"desc":"188","fix":"189"},"Update the dependencies array to be: [loadContacts]",{"range":"190","text":"191"},"Update the dependencies array to be: [idConfirmedItem, removeConfirm, removeContact]",{"range":"192","text":"193"},"Update the dependencies array to be: [getContacts]",{"range":"194","text":"195"},"Update the dependencies array to be: [addConfirm]",{"range":"196","text":"197"},{"range":"198","text":"191"},"Update the dependencies array to be: [getPhoneMask, phone]",{"range":"199","text":"200"},"Update the dependencies array to be: [getContatctById, id]",{"range":"201","text":"202"},[1249,1251],"[loadContacts]",[1405,1422],"[idConfirmedItem, removeConfirm, removeContact]",[1878,1880],"[getContacts]",[2477,2479],"[addConfirm]",[3530,3532],[1476,1483],"[getPhoneMask, phone]",[1581,1585],"[getContatctById, id]"]